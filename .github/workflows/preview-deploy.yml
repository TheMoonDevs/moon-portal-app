name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write

env:
  PORT_RANGE_START: 8000
  PORT_RANGE_END: 9000

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  determine_project:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-projects.outputs.projects }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed projects
        id: set-projects
        run: |
          git fetch --prune
          git fetch origin +refs/heads/*:refs/remotes/origin/*
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          project_paths=("portal" "payzone" "home")
          projects=()
          home_changed=false
          if echo "$changed_files" | grep -q "^home/"; then
            home_changed=true
          fi
          if echo "$changed_files" | grep -q "^portal/"; then
            projects+=("portal")
          fi
          if echo "$changed_files" | grep -q "^payzone/"; then
            projects+=("payzone")
          fi
          if ! $home_changed && [ ${#projects[@]} -eq 0 ] && echo "$changed_files" | grep -vq "^portal/" && echo "$changed_files" | grep -vq "^payzone/" && echo "$changed_files" | grep -vq "^home/"; then
            projects=("portal" "payzone")
          fi
          echo "Changed projects: ${projects[@]}"
          echo "projects=$(jq -c -n --argjson projects "$(printf '%s\n' "${projects[@]}" | jq -R . | jq -s .)" '$projects')" >> $GITHUB_OUTPUT

      - name: Debug Changed Projects Output
        run: |
          echo "Projects output: ${{ steps.set-projects.outputs.projects }}"

  build_and_deploy:
    needs: determine_project
    if: needs.determine_project.outputs.projects != 'null' && needs.determine_project.outputs.projects != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.determine_project.outputs.projects) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Calculate preview port
        id: calculate-port
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PROJECT_OFFSET=$([ "${{ matrix.project }}" = "portal" ] && echo 0 || echo 500)
          PORT_RANGE=$((PORT_RANGE_END - PORT_RANGE_START))
          PORT=$((PORT_RANGE_START + (PR_NUMBER + PROJECT_OFFSET) % PORT_RANGE))
          echo "port=$PORT" >> $GITHUB_OUTPUT

      - name: Setup build environment
        run: |
          mkdir -p ./${{ matrix.project }}

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Cache dependencies and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/${{ matrix.project }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        working-directory: ./${{ matrix.project }}
        run: npm i

      - name: Create or Update Initial Status Comments
        continue-on-error: true
        uses: actions/github-script@v6
        id: status-comments
        with:
          script: |
            const project = '${{ matrix.project }}';
            const prNumber = context.issue.number;
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            const logsUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            // Add building label
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: [`building-${project}`]
              });
            } catch (e) {
              console.error('Failed to add building label:', e);
            }

            const initialStatus = [
              '| Status | üöß Building |',
              '| ------ | ----------- |',
              `| Logs | [View Logs](${logsUrl}) |`,
              '| Preview URL | - |'
            ].join('\n');

            const uniqueIdentifier = project === 'portal' ? '<!-- PORTAL_PREVIEW_STATUS -->' : '<!-- PAYZONE_PREVIEW_STATUS -->';
            let existingComment = comments.data.find(comment =>
              comment.body.includes(uniqueIdentifier)
            );
            if (!existingComment) {
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `${uniqueIdentifier}\n### ${project.charAt(0).toUpperCase() + project.slice(1)} Preview Deployment Status\n\n${initialStatus}`
              });
            } else {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: `${uniqueIdentifier}\n### ${project.charAt(0).toUpperCase() + project.slice(1)} Preview Deployment Status\n\n${initialStatus}`
              });
            }

      - name: Build project
        continue-on-error: true
        id: build
        working-directory: ./${{ matrix.project }}
        run: |
          if [ "${{ matrix.project }}" = "portal" ]; then
            export DOTENV_KEY=${{ secrets.PORTAL_DOTENV_KEY }}
          else
            export DOTENV_KEY=${{ secrets.PAYZONE_DOTENV_KEY }}
          fi
          npm run build:ci || (echo "Failed to build ${{ matrix.project }}" && core.setFailed(`Failed to build ${project}`) && exit 1)

      - name: Update Build Status in Comments
        continue-on-error: true
        if: success() || failure()
        uses: actions/github-script@v6
        with:
          script: |
            const project = '${{ matrix.project }}';
            const buildFailed = '${{ job.status }}' === 'failure';
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            // Handle labels
            try {
              // Remove existing build status labels
              const labelsToRemove = [`building-${project}`, `${project}-build-failed`, `${project}-preview-deployed`];
              for (const label of labelsToRemove) {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    name: label
                  });
                }

              // Add appropriate label based on build status
              const newLabel = buildFailed ? `${project}-build-failed` : `${project}-preview-deployed`;
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: [newLabel]
              });
            } catch (e) {
              console.error('Failed to update labels:', e);
            }

            // Update comment with proper table formatting
            const uniqueIdentifier = project === 'portal' ? '<!-- PORTAL_PREVIEW_STATUS -->' : '<!-- PAYZONE_PREVIEW_STATUS -->';
            const existingComment = comments.data.find(comment => comment.body.includes(uniqueIdentifier));
            const logsUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const status = buildFailed ? '‚ùå Build Failed' : '‚úÖ Build Succeeded';

            const updatedStatus = [
              '| Status | ' + status + ' |',
              '| ------ | ----------- |',
              `| Logs | [View Logs](${logsUrl}) |`,
              '| Preview URL | - |'
            ].join('\n');

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: `${uniqueIdentifier}\n### ${project.charAt(0).toUpperCase() + project.slice(1)} Preview Deployment Status\n\n${updatedStatus}`
              });
            }
            if (buildFailed) {
              core.setFailed(`Failed to build ${project}`);
              exit(1);
            }

      - name: Prepare deployment files
        continue-on-error: true
        if: success()
        run: |
          shopt -s dotglob
          mkdir -p build/${{ matrix.project }}/${{ github.event.pull_request.number }}/.next/static
          mkdir -p build/${{ matrix.project }}/${{ github.event.pull_request.number }}/public
          cp -r ./${{ matrix.project }}/.next/standalone/* build/${{ matrix.project }}/${{ github.event.pull_request.number }}
          cp -r ./${{ matrix.project }}/.next/static/* build/${{ matrix.project }}/${{ github.event.pull_request.number }}/.next/static
          cp -r ./${{ matrix.project }}/public/* build/${{ matrix.project }}/${{ github.event.pull_request.number }}/public

      - name: Upload using rsync
        continue-on-error: true
        if: success()
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: "-av --delete --partial --bwlimit=5000"
          path: "build/${{ matrix.project }}/${{ github.event.pull_request.number }}/" # Local path to upload
          remote_path: "/home/${{ secrets.DROPLET_USER }}/apps/builds/${{ matrix.project }}/preview/${{ github.event.pull_request.number }}" # Remote destination path
          remote_host: ${{ secrets.DROPLET_IP }}
          remote_user: ${{ secrets.DROPLET_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up SSH (secured)
        if: success()
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          log-public-key: false

      - name: Deploy on DigitalOcean
        continue-on-error: true
        if: success()
        id: deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} << 'ENDSSH'
            source ~/.nvm/nvm.sh
            nvm use 20  # Explicitly set Node version to 20
            # Set variables
            PROJECT="${{ matrix.project }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PORT="${{ steps.calculate-port.outputs.port }}"
            APP_PATH="/home/${{ secrets.DROPLET_USER }}/apps/builds/${PROJECT}/preview/${PR_NUMBER}"
            # Navigate to the deployment path
            cd "$APP_PATH"
            
            # Copy environment file if it exists
            # if [ -f /home/${{ secrets.DROPLET_USER }}/apps/moon-portal-app/${PROJECT}/.env.preview ]; then
            #   cp /home/${{ secrets.DROPLET_USER }}/apps/moon-portal-app/${PROJECT}/.env.preview .env
            #   echo "PORT=${PORT}" >> .env
            #   chmod 600 .env  # Secure permissions for env file
            # else
            #   echo "Warning: .env.preview file not found"
            #   exit 1
            # fi

            if [ "${{ matrix.project }}" = "portal" ]; then
              export DOTENV_KEY=${{ secrets.PORTAL_DOTENV_KEY }}
            else
              export DOTENV_KEY=${{ secrets.PAYZONE_DOTENV_KEY }}
            fi

            if pm2 list | grep -q "${PROJECT}-${PR_NUMBER}" ; then
              pm2 restart "${PROJECT}-${PR_NUMBER}" --update-env
            else
              pm2 start npm --name "${PROJECT}-${PR_NUMBER}" -- run start:ci
            fi
            
            # Verify deployment
            if ! pm2 show "${PROJECT}-${PR_NUMBER}" > /dev/null 2>&1; then
              echo "Failed to start/restart PM2 process for ${PROJECT}"
              exit 1
            fi
            echo "Successfully deployed ${PROJECT} preview for PR #${PR_NUMBER}"
          ENDSSH

      - name: Update comment with preview URL
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const project = '${{ matrix.project }}';
            const port = '${{ steps.calculate-port.outputs.port }}';
            const subdomain = project === 'payzone' ? 'pay' : 'portal';
            const prNumber = '${{ github.event.pull_request.number }}';
            const previewUrl = `https://preview-${prNumber}-${port}.${subdomain}.themoondevs.com`;

            try {
              // Update labels for successful deployment
              const labelsToRemove = [
                `${project}-build-failed`,
                `${project}-deploy-failed`,
                `${project}-preview-deployed`,
                `building-${project}`
              ];
              
              // Remove existing labels
              for (const label of labelsToRemove) {
                try {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    name: label
                  });
                } catch (e) {
                  // Ignore if label doesn't exist
                }
              }
              
              // Add deployed label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: [`${project}-preview-deployed`]
              });
              
              // Update comment with preview URL
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              const uniqueIdentifier = project === 'portal' ? '<!-- PORTAL_PREVIEW_STATUS -->' : '<!-- PAYZONE_PREVIEW_STATUS -->';
              const existingComment = comments.data.find(comment => comment.body.includes(uniqueIdentifier));
              const logsUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
              
              if (existingComment) {
                const updatedStatus = [
                  '| Status | üöÄ Preview Deployed |',
                  '| ------ | ----------------- |',
                  `| Logs | [View Logs](${logsUrl}) |`,
                  `| Preview URL | [Preview URL](${previewUrl}) |`
                ].join('\n');

                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: `${uniqueIdentifier}\n### ${project.charAt(0).toUpperCase() + project.slice(1)} Preview Deployment Status\n\n${updatedStatus}`
                });
              }
            } catch (e) {
              console.error('Failed to update deployment status:', e);
              core.setFailed(`Failed to update deployment status: ${e.message}`);
            }
