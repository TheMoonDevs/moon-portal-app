name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

permissions:
  contents: write
  pull-requests: write

env:
  PORT_RANGE_START: 8000
  PORT_RANGE_END: 9000

jobs:
  determine_project:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-projects.outputs.projects }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed projects
        id: set-projects
        run: |
          git fetch --prune
          git fetch origin +refs/heads/*:refs/remotes/origin/*
          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          project_paths=("portal" "payzone" "home")
          projects=()
          home_changed=false
          if echo "$changed_files" | grep -q "^home/"; then
            home_changed=true
          fi
          if echo "$changed_files" | grep -q "^portal/"; then
            projects+=("portal")
          fi
          if echo "$changed_files" | grep -q "^payzone/"; then
            projects+=("payzone")
          fi
          if ! $home_changed && [ ${#projects[@]} -eq 0 ] && echo "$changed_files" | grep -vq "^portal/" && echo "$changed_files" | grep -vq "^payzone/" && echo "$changed_files" | grep -vq "^home/"; then
            projects=("portal" "payzone")
          fi
          echo "Changed projects: ${projects[@]}"
          echo "projects=$(jq -c -n --argjson projects "$(printf '%s\n' "${projects[@]}" | jq -R . | jq -s .)" '$projects')" >> $GITHUB_OUTPUT
      - name: Debug Changed Projects Output
        run: |
          echo "Projects output: ${{ steps.set-projects.outputs.projects }}"

      - name: Create or Update Initial Status Comments
        uses: actions/github-script@v6
        id: status-comments
        with:
          script: |
            const prNumber = context.issue.number;
            const projects = ["portal", "payzone"];
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            const logsUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            const initialTable = `
            | Label       | Portal Status   | Payzone Status   |
            | ----------- | --------------- | ---------------- |
            | Status      | üöß Building     | üöß Building      |
            | Logs        | [View Logs](${logsUrl}) | [View Logs](${logsUrl}) |
            | Preview URL | -               | -                |
            `;

            const uniqueIdentifier = `<!-- PREVIEW_DEPLOYMENT_STATUS -->`;

            let existingComment = comments.data.find(comment =>
              comment.body.includes(uniqueIdentifier)
            );

            if (!existingComment) {
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `${uniqueIdentifier}\n### Preview Deployment Status\n${initialTable}`
              });
            } else {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: `${uniqueIdentifier}\n### Preview Deployment Status\n${initialTable}`
              });
            }

  build_and_sync:
    needs: determine_project
    if: needs.determine_project.outputs.projects != 'null' && needs.determine_project.outputs.projects != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.determine_project.outputs.projects) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Calculate preview port
        id: calculate-port
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PROJECT_OFFSET=$([ "${{ matrix.project }}" = "portal" ] && echo 0 || echo 500)
          PORT_RANGE=$((PORT_RANGE_END - PORT_RANGE_START))
          PORT=$((PORT_RANGE_START + (PR_NUMBER + PROJECT_OFFSET) % PORT_RANGE))
          echo "port=$PORT" >> $GITHUB_OUTPUT

      - name: Setup build environment
        run: |
          mkdir -p ./${{ matrix.project }}
          cat << EOF > ./${{ matrix.project }}/.env.build
          DATABASE_URL=${{ secrets.PREVIEW_DATABASE_URL }}
          GIAM_CLIENT_EMAIL=${{ secrets.PREVIEW_GIAM_CLIENT_EMAIL }}
          GIAM_CLIENT_ID=${{ secrets.PREVIEW_GIAM_CLIENT_ID }}
          GIAM_PRIVATE_KEY='${{ secrets.PREVIEW_GIAM_PRIVATE_KEY }}'
          SLACK_OAUTH_TOKEN=${{ secrets.SLACK_OAUTH_TOKEN }}
          EOF

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        working-directory: ./${{ matrix.project }}
        run: npm i
        continue-on-error: false

      - name: Build project
        id: build
        working-directory: ./${{ matrix.project }}
        env:
          DATABASE_URL: ${{ secrets.PREVIEW_DATABASE_URL }}
          GIAM_CLIENT_EMAIL: ${{ secrets.PREVIEW_GIAM_CLIENT_EMAIL }}
          GIAM_CLIENT_ID: ${{ secrets.PREVIEW_GIAM_CLIENT_ID }}
          GIAM_PRIVATE_KEY: ${{ secrets.PREVIEW_GIAM_PRIVATE_KEY }}
          SLACK_OAUTH_TOKEN: ${{ secrets.SLACK_OAUTH_TOKEN }}
        run: npm run build

      - name: Prepare deployment files
        if: success()
        run: |
          shopt -s dotglob
          mkdir -p build/${{ matrix.project }}/${{ github.event.pull_request.number }}/.next/static
          mkdir -p build/${{ matrix.project }}/${{ github.event.pull_request.number }}/public
          cp -r ./${{ matrix.project }}/.next/standalone/* build/${{ matrix.project }}/${{ github.event.pull_request.number }}
          cp -r ./${{ matrix.project }}/.next/static/* build/${{ matrix.project }}/${{ github.event.pull_request.number }}/.next/static
          cp -r ./${{ matrix.project }}/public/* build/${{ matrix.project }}/${{ github.event.pull_request.number }}/public

      - name: Upload using rsync
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: "-av --delete --partial --bwlimit=5000"
          path: "build/${{ matrix.project }}/${{ github.event.pull_request.number }}/" 
          remote_path: "/home/techteam/apps/builds/${{ matrix.project }}/preview/${{ github.event.pull_request.number }}" 
          remote_host: ${{ secrets.DROPLET_IP }}
          remote_user: ${{ secrets.DROPLET_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

  update_comment_after_build:
    needs: build_and_sync
    runs-on: ubuntu-latest
    steps:
      - name: Update Build Status in Comment
        if: success() || failure()
        uses: actions/github-script@v6
        with:
          script: |
            const project = '${{ matrix.project }}';
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            const comment = comments.data.find(c => c.body.includes(`<!-- PREVIEW_DEPLOYMENT_STATUS -->`));
            const status = core.getInput('job-status') === 'failure' ? '‚ùå Build Failed' : '‚úÖ Build Succeeded';

            if (comment) {
              const logsUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
              
              const updatedTable = comment.body.replace(
                new RegExp(`\\| ${project.charAt(0).toUpperCase() + project.slice(1)} Status\\s+\\| [^|]+\\|`),
                `| ${project.charAt(0).toUpperCase() + project.slice(1)} Status | ${status} |`
              ).replace(
                new RegExp(`\\| ${project.charAt(0).toUpperCase() + project.slice(1)} Logs\\s+\\| [^|]+\\|`),
                `| ${project.charAt(0).toUpperCase() + project.slice(1)} Logs | [View Logs](${logsUrl}) |`
              );

              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
                body: updatedTable
              });
            }

            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: 'preview-deployed'
              });
            } catch (e) {}

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['build-failed']
            });

  deploy:
    needs: update_comment_after_build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.determine_project.outputs.projects) }}
    steps:
      - name: Set up SSH (secured)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          log-public-key: false

      - name: Deploy on DigitalOcean
        if: success()
        id: deploy
        continue-on-error: true
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} << 'ENDSSH'

            source ~/.nvm/nvm.sh
            nvm use 20  # Explicitly set Node version to 20

            # Set variables
            PROJECT="${{ matrix.project }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PORT="${{ steps.calculate-port.outputs.port }}"
            APP_PATH="/home/${{ secrets.DROPLET_USER }}/apps/builds/${PROJECT}/preview/${PR_NUMBER}"

            # Navigate to the deployment path
            cd "$APP_PATH"
            
            # Copy environment file if it exists
            if [ -f /home/techteam/apps/moon-portal-app/${PROJECT}/.env.preview ]; then
              cp /home/techteam/apps/moon-portal-app/${PROJECT}/.env.preview .env
              echo "PORT=${PORT}" >> .env
              chmod 600 .env  # Secure permissions for env file
            else
              echo "Warning: .env.preview file not found"
              exit 1
            fi
            
            if pm2 list | grep -q "${PROJECT}-${PR_NUMBER}"; then
              pm2 restart "${PROJECT}-${PR_NUMBER}" --update-env
            else
              pm2 start npm --name "${PROJECT}-${PR_NUMBER}" -- run start:prod
            fi
            
            # Verify deployment and handle errors
            if ! pm2 show "${PROJECT}-${PR_NUMBER}" > /dev/null 2>&1; then
              echo "Failed to start/restart PM2 process for ${PROJECT}"
              # Update status to deployment failed
              ssh -T ${{ secrets.GITHUB_TOKEN }} << 'ENDSSH2'
                gh issue edit ${context.issue.number} --label-remove "deployed-${PROJECT}" --label-add "deploy-failed-${PROJECT}"
              ENDSSH2
              exit 1
            fi
            echo "Successfully deployed ${PROJECT} preview for PR #${PR_NUMBER}"
          ENDSSH

  update_comment_after_deploy:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Update comment with preview URL
        uses: actions/github-script@v6
        with:
          script: |
            const projects = ${{ fromJson(needs.determine_project.outputs.projects) }};
            const prNumber = '${{ github.event.pull_request.number }}';
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            const comment = comments.data.find(c => c.body.includes(`<!-- PREVIEW_DEPLOYMENT_STATUS -->`));
            let updatedTable = comment.body;

            for (const project of projects) {
              const port = '${{ steps.calculate-port.outputs.port }}';
              const subdomain = project === 'payzone' ? 'pay' : 'portal';
              const previewUrl = `https://preview-${prNumber}-${port}.${subdomain}.themoondevs.com`;
              const status = core.getInput('job-status') === 'failure' ? '‚ùå Deployment Failed' : '‚úÖ Deployed Successfully';

              updatedTable = updatedTable.replace(
                new RegExp(`\\| ${project.charAt(0).toUpperCase() + project.slice(1)} Status\\s+\\| [^|]+\\|`),
                `| ${project.charAt(0).toUpperCase() + project.slice(1)} Status | ${status} |`
              ).replace(
                new RegExp(`\\| ${project.charAt(0).toUpperCase() + project.slice(1)} Preview URL\\s+\\| [^|]+\\|`),
                `| ${project.charAt(0).toUpperCase() + project.slice(1)} Preview URL | [Preview URL](${previewUrl}) |`
              );
            }

            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: comment.id,
              body: updatedTable
            });

            try {
              const existingLabels = ["portal-build-failed","payzone-build-failed", "portal-deploy-failed", "payzone-deploy-failed", "portal-deployed", "payzone-deployed"];
              await Promise.all(existingLabels.map(async label => {
                try {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    name: label
                  });
                } catch (e) {}
              }));

              for (const project of projects) {
                const deployedLabel = `deployed-${project}`;
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: [deployedLabel]
                });
              }
            } catch (e) {
              core.warning(`Failed to update labels: ${e.message}`);
            }

  cleanup_on_pr_close:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Cleanup Deployments
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          ssh -o StrictHostKeyChecking=no ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} << EOF
            # Stop and remove PM2 processes
            pm2 list | grep -E "(portal|payzone)-${PR_NUMBER}" | awk '{print \$2}' | xargs -r pm2 delete
            
            # Remove deployment directories
            rm -rf /home/techteam/apps/moon-portal-app/builds/portal/${PR_NUMBER}
            rm -rf /home/techteam/apps/moon-portal-app/builds/payzone/${PR_NUMBER}
            
            echo "Cleaned up PR #$PR_NUMBER"
          EOF

      - name: Update comment for cleanup
        uses: actions/github-script@v6
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const deploymentComments = comments.data.filter(comment => 
              comment.body.includes('Preview Deployed Successfully') ||
              comment.body.includes('Deploying') ||
              comment.body.includes('Preview Build Failed')
            );

            for (const comment of deploymentComments) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
                body: `## üóëÔ∏è Preview Environment Removed
                
                This preview environment has been cleaned up as the PR was closed.`
              });
            }