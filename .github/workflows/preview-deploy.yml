name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

permissions:
  contents: write
  pull-requests: write

env:
  PORT_RANGE_START: 8000
  PORT_RANGE_END: 9000

jobs:
  determine_project:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-projects.outputs.projects }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed projects
        id: set-projects
        run: |
          git fetch --prune
          git fetch origin +refs/heads/*:refs/remotes/origin/*
          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          project_paths=("portal" "payzone" "home")
          projects=()
          home_changed=false
          if echo "$changed_files" | grep -q "^home/"; then
            home_changed=true
          fi
          if echo "$changed_files" | grep -q "^portal/"; then
            projects+=("portal")
          fi
          if echo "$changed_files" | grep -q "^payzone/"; then
            projects+=("payzone")
          fi
          if ! $home_changed && [ ${#projects[@]} -eq 0 ] && echo "$changed_files" | grep -vq "^portal/" && echo "$changed_files" | grep -vq "^payzone/" && echo "$changed_files" | grep -vq "^home/"; then
            projects=("portal" "payzone")
          fi
          echo "Changed projects: ${projects[@]}"
          echo "projects=$(jq -c -n --argjson projects "$(printf '%s\n' "${projects[@]}" | jq -R . | jq -s .)" '$projects')" >> $GITHUB_OUTPUT
      - name: Debug Changed Projects Output
        run: |
          echo "Projects output: ${{ steps.set-projects.outputs.projects }}"

  build_and_deploy:
    needs: determine_project
    if: needs.determine_project.outputs.projects != 'null' && needs.determine_project.outputs.projects != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.determine_project.outputs.projects) }}
    steps:
      - name: Create initial deployment comment
        uses: actions/github-script@v6
        id: deployment-comment
        with:
          script: |
            const prNumber = '${{ github.event.pull_request.number }}';
            const comment = await github.rest.issues.createComment({
              issue_number: parseInt(prNumber),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üöÄ Deploying ${{ matrix.project }} Preview
              ‚è≥ Build and deployment in progress...
              [View build logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });
            return comment.data.id;

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Calculate preview port
        id: calculate-port
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PROJECT_OFFSET=$([ "${{ matrix.project }}" = "portal" ] && echo 0 || echo 500)
          PORT_RANGE=$((PORT_RANGE_END - PORT_RANGE_START))
          PORT=$((PORT_RANGE_START + (PR_NUMBER + PROJECT_OFFSET) % PORT_RANGE))
          echo "port=$PORT" >> $GITHUB_OUTPUT

      # Create build environment file with GitHub secrets
      - name: Setup build environment
        run: |
          mkdir -p ./${{ matrix.project }}

          cat << EOF > ./${{ matrix.project }}/.env.build
          DATABASE_URL=${{ secrets.PREVIEW_DATABASE_URL }}
          GIAM_CLIENT_EMAIL=${{ secrets.PREVIEW_GIAM_CLIENT_EMAIL }}
          GIAM_CLIENT_ID=${{ secrets.PREVIEW_GIAM_CLIENT_ID }}
          GIAM_PRIVATE_KEY='${{ secrets.PREVIEW_GIAM_PRIVATE_KEY }}'
          SLACK_OAUTH_TOKEN=${{ secrets.SLACK_OAUTH_TOKEN }}
          EOF

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        working-directory: ./${{ matrix.project }}
        run: npm ci
        continue-on-error: false

      - name: Build project
        id: build
        working-directory: ./${{ matrix.project }}
        env:
          DATABASE_URL: ${{ secrets.PREVIEW_DATABASE_URL }}
          GIAM_CLIENT_EMAIL: ${{ secrets.PREVIEW_GIAM_CLIENT_EMAIL }}
          GIAM_CLIENT_ID: ${{ secrets.PREVIEW_GIAM_CLIENT_ID }}
          GIAM_PRIVATE_KEY: ${{ secrets.PREVIEW_GIAM_PRIVATE_KEY }}
          SLACK_OAUTH_TOKEN: ${{ secrets.SLACK_OAUTH_TOKEN }}
        run: npm run build
        continue-on-error: false

      - name: Update comment on build failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const commentId = '${{ steps.deployment-comment.outputs.result }}';
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: `## ‚ùå ${{ matrix.project }} Preview Build Failed
              
              The build process has failed. Please check the [build logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for more details.`
            });

            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: 'preview-deployed'
              });
            } catch (e) {}

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['build-failed']
            });

      - name: Prepare deployment files
        if: success()
        run: |
          mkdir -p build/${{ matrix.project }}/${{ github.event.pull_request.number }}/.next/static
          mkdir -p build/${{ matrix.project }}/${{ github.event.pull_request.number }}/public
          cp -r ./${{ matrix.project }}/.next/standalone/* build/${{ matrix.project }}/${{ github.event.pull_request.number }}
          cp -r ./${{ matrix.project }}/.next/static/* build/${{ matrix.project }}/${{ github.event.pull_request.number }}/.next/static
          cp -r ./${{ matrix.project }}/public/* build/${{ matrix.project }}/${{ github.event.pull_request.number }}/public

      - name: Archive deployment files
        if: success()
        run: |
          tar -czf preview_${{ matrix.project }}_${{ github.event.pull_request.number }}.tar.gz -C build/${{ matrix.project }} ${{ github.event.pull_request.number }}
          if [ ! -f preview_${{ matrix.project }}_${{ github.event.pull_request.number }}.tar.gz ]; then
            echo "Error: TAR file not created."
            exit 1
          fi

      - name: Upload to DigitalOcean
        if: success()
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "preview_${{ matrix.project }}_${{ github.event.pull_request.number }}.tar.gz"
          target: "/tmp/"
          strip_components: 1
        continue-on-error: true

      - name: Set up SSH (secured)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          log-public-key: false

      - name: Deploy on DigitalOcean
        if: success()
        id: deploy
        continue-on-error: true # Allow other projects to continue if one fails
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} << 'ENDSSH'
            # Set variables
            PROJECT="${{ matrix.project }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PORT="${{ steps.calculate-port.outputs.port }}"
            
            # Create required directories with proper permissions
            mkdir -p ~/apps/builds/${PROJECT}/preview
            
            # Extract files with proper ownership
            cd ~/apps/builds/${PROJECT}/preview
            TAR_FILE="/tmp/preview_${PROJECT}_${PR_NUMBER}.tar.gz"
            if [ ! -f "$TAR_FILE" ]; then
            echo "Error: TAR file not found at $TAR_FILE"
            exit 1
            fi
            tar xzf "$TAR_FILE"
            if [ $? -ne 0 ]; then
            echo "Error extracting TAR file"
            exit 1
            fi
            
            cd ${PR_NUMBER}
            
            # Copy environment file if it exists
            if [ -f ~/apps/moon-portal-app/${PROJECT}/.env.preview ]; then
              cp ~/apps/moon-portal-app/${PROJECT}/.env.preview .env
              echo "PORT=${PORT}" >> .env
              chmod 600 .env  # Secure permissions for env file
            else
              echo "Warning: .env.preview file not found"
              exit 1
            fi
            
            # Clean up temporary files
            rm -f /tmp/preview_${PROJECT}_${PR_NUMBER}.tar.gz
            
            # PM2 process management
            if pm2 list | grep -q "${PROJECT}-${PR_NUMBER}"; then
              pm2 restart "${PROJECT}-${PR_NUMBER}" --update-env
            else
              cd "${PROJECT_DIR}"
              pm2 start node --name "${PROJECT}-${PR_NUMBER}" -- "server.js"
            fi
            
            # Verify deployment
            if ! pm2 show "${PROJECT}-${PR_NUMBER}" > /dev/null 2>&1; then
              echo "Failed to start/restart PM2 process"
              exit 1
            fi
            
            echo "Successfully deployed ${PROJECT} preview for PR #${PR_NUMBER}"
          ENDSSH

      - name: Update comment with preview URL
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const port = '${{ steps.calculate-port.outputs.port }}';
            const subdomain = '${{ matrix.project }}' === 'payzone' ? 'pay' : 'portal';
            const pr_number = '${{ github.event.pull_request.number }}';
            const previewUrl = `https://preview-${pr_number}-${port}.${subdomain}.themoondevs.com`;

            const commentId = '${{ steps.deployment-comment.outputs.result }}';
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: `## ‚úÖ ${{ matrix.project }} Preview Deployed Successfully
              
              üîç Preview URL: ${previewUrl}
              
              Built from [${context.sha.substring(0, 7)}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})
              [View build logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });

            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: 'build-failed'
              });
            } catch (e) {}

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['preview-deployed']
            });

  cleanup_on_pr_close:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Cleanup Deployments
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          ssh -o StrictHostKeyChecking=no ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} << EOF
            # Stop and remove PM2 processes
            pm2 list | grep -E "(portal|payzone)-${PR_NUMBER}" | awk '{print \$2}' | xargs -r pm2 delete
            
            # Remove deployment directories
            rm -rf /home/techteam/apps/moon-portal-app/builds/portal/${PR_NUMBER}
            rm -rf /home/techteam/apps/moon-portal-app/builds/payzone/${PR_NUMBER}
            
            echo "Cleaned up PR #$PR_NUMBER"
          EOF

      - name: Update comment for cleanup
        uses: actions/github-script@v6
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const deploymentComments = comments.data.filter(comment => 
              comment.body.includes('Preview Deployed Successfully') ||
              comment.body.includes('Deploying') ||
              comment.body.includes('Preview Build Failed')
            );

            for (const comment of deploymentComments) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
                body: `## üóëÔ∏è Preview Environment Removed
                
                This preview environment has been cleaned up as the PR was closed.`
              });
            }
