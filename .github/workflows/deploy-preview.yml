name: Deploy Preview

on:
  workflow_call:
    inputs:
      pr_number:
        required: true
        type: string
      project:
        required: true
        type: string
      clean_flag:
        required: false
        type: boolean
    secrets:
      DROPLET_IP:
        required: true
      SSH_PRIVATE_KEY:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy or Redeploy Preview on DigitalOcean
        run: |

          ssh -o StrictHostKeyChecking=no techteam@${{ secrets.DROPLET_IP }} << "EOF"
            LOCK_FILE="/tmp/deploy/deploy-lock"
            echo "Checking for ongoing deployments..."

            # Wait if the lock file exists
            while [ -f "$LOCK_FILE" ]; do
              echo "Deployment lock exists. Waiting..."
              sleep 10
            done

            # Create the lock file to indicate the start of a new deployment
            mkdir -p /tmp/deploy
            touch "$LOCK_FILE"
            echo "Deployment lock created. Proceeding with deployment for PR #${PR_NUMBER} - Project: ${PROJECT}"
            
            PR_NUMBER=${{ inputs.pr_number }}
            PROJECT=${{ inputs.project }}
            CLEAN_FLAG=${{ inputs.clean_flag }}
            # Find the first available port starting from 8000
            START_PORT=8000
            MAX_PORT=10000
            PORT=$START_PORT
            while [ $PORT -lt $MAX_PORT ]; do
              if ! ss -tlnp | grep ":${PORT} " > /dev/null; then
                break
              fi
              PORT=$((PORT + 1))
            done
            if [ $PORT -ge $MAX_PORT ]; then
              echo "ERROR: No available ports found."
              rm -f "$LOCK_FILE"
              exit 1
            fi

            export PORT=$PORT

            UNIQUE_ID="${PROJECT}-${PR_NUMBER}-$PORT"
            if [[ "$CLEAN_FLAG" == "true" ]]; then
              echo "Cleaning up before redeployment..."
              pm2 list | grep -E ${PROJECT}-${PR_NUMBER}- | awk '{print $2}' | xargs -r pm2 delete
              rm -rf /home/techteam/apps/moon-portal-app/builds/${PROJECT}/${PR_NUMBER}
            fi

            echo "Redeploying for ${PROJECT} PR #${PR_NUMBER}..."

            cd apps/moon-portal-app/${PROJECT}
            git stash || git reset --hard
            git fetch origin pull/${PR_NUMBER}/head:${UNIQUE_ID}
            git checkout ${UNIQUE_ID}

            if ! npm install; then
              echo "ERROR: npm install failed."
              rm -f "$LOCK_FILE"
              exit 1
            fi

            if ! npm run build:preview; then
              echo "ERROR: Build failed."
              rm -f "$LOCK_FILE"
              exit 1
            fi

            cd ../

            # Enable dotglob to include hidden files in wildcard matches
            shopt -s dotglob
            mkdir -p builds/${PROJECT}/${PR_NUMBER}/${PORT}
            cp -r ${PROJECT}/.next/standalone/* builds/${PROJECT}/${PR_NUMBER}/${PORT}
            cp -r ${PROJECT}/.next/static builds/${PROJECT}/${PR_NUMBER}/${PORT}/.next/static
            cp -r ${PROJECT}/public builds/${PROJECT}/${PR_NUMBER}/${PORT}/public
            cp ${PROJECT}/.env.preview builds/${PROJECT}/${PR_NUMBER}/${PORT}/.env

            cd builds/${PROJECT}/${PR_NUMBER}/${PORT}
            PORT=$PORT pm2 start node --name "$UNIQUE_ID" -- server.js || {
              echo "ERROR: Failed to start PM2 process."
              rm -f "$LOCK_FILE"
              exit 1
            }

            echo "PREVIEW_PORT=$PORT" > /tmp/preview-port-${PR_NUMBER}.txt
            rm -f "$LOCK_FILE"
            echo "Deployment completed and lock released for PR #${PR_NUMBER}"
          EOF

      - name: Retrieve Preview Port
        run: |
          ssh -o StrictHostKeyChecking=no techteam@${{ secrets.DROPLET_IP }} "cat /tmp/preview-port-${{ inputs.pr_number }}.txt" > preview-port.txt
          cat preview-port.txt
          PREVIEW_PORT=$(cat preview-port.txt | grep 'PREVIEW_PORT' | cut -d'=' -f2)
          echo "PREVIEW_PORT=${PREVIEW_PORT}" >> $GITHUB_ENV

      - name: Comment Preview URL
        uses: actions/github-script@v6
        env:
          PREVIEW_PORT: ${{ env.PREVIEW_PORT }}
        with:
          script: |
            const project = '${{ inputs.project }}';
            const subdomain = project === 'payzone' ? 'pay' : project;
            const prNumber = '${{ inputs.pr_number || github.event.pull_request.number }}';
            const port = process.env.PREVIEW_PORT;
            const uniqueId = `preview-${prNumber}-${port}`;
            const previewUrl = `https://${uniqueId}.${subdomain}.themoondevs.com`;
            github.rest.issues.createComment({
              issue_number: parseInt(prNumber),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ ${project.charAt(0).toUpperCase() + project.slice(1)} preview available at: [${previewUrl}](${previewUrl})\n\n` +
                    `To redeploy or manage, use comment commands:\n` +
                    `üóëÔ∏è Cleanup: @bot cleanup #${prNumber}\n` +
                    `üîÑ Redeploy: @bot deploy ${project}\n` +
                    `üîí Delete Lock: @bot delete_lock`
            });

      - name: Clean up deployment lock
        if: failure() || cancelled()
        run: |
          ssh -o StrictHostKeyChecking=no techteam@${{ secrets.DROPLET_IP }} << "EOF"
            LOCK_FILE="/tmp/deploy/deploy-lock"
            rm -f "$LOCK_FILE"
            git stash pop || echo "No stashed changes to pop."
          EOF
