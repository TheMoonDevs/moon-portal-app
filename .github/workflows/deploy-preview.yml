name: Deploy Preview

on:
  workflow_call:
    inputs:
      pr_number:
        required: true
        type: string
      project:
        required: true
        type: string
      clean_flag:
        required: false
        type: boolean
    secrets:
      DROPLET_IP:
        required: true
      SSH_PRIVATE_KEY:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy or Redeploy Preview on DigitalOcean
        run: |
          ssh -o StrictHostKeyChecking=no techteam@${{ secrets.DROPLET_IP }} <<EOF
          LOCK_FILE="/tmp/deploy/deploy-lock"  # Unified lock file for all projects
          echo "Checking for ongoing deployments..."

          # Wait if the lock file exists
          while [ -f "$LOCK_FILE" ]; do
            echo "Deployment lock exists. Waiting..."
            sleep 10
          done

          PR_NUMBER=${{ inputs.pr_number }}
          PROJECT=${{ inputs.project }}
          CLEAN_FLAG=${{ inputs.clean_flag }}
          echo "Starting deployment for PR #$PR_NUMBER - Project: $PROJECT"

          touch "$LOCK_FILE"
          
          START_PORT=8000
          MAX_PORT=10000
          PORT=\$START_PORT
          while [ \$PORT -lt \$MAX_PORT ]; do
            if ! ss -tlnp | grep ":${PORT} " > /dev/null; then
              break
            fi
            PORT=\$((PORT + 1))
          done
          if [ \$PORT -ge \$MAX_PORT ]; then
            echo "ERROR: No available ports found."
            rm -f "\$LOCK_FILE"
            exit 1
          fi
          UNIQUE_ID="\${PROJECT}-\${PR_NUMBER}-\${PORT}"
          if [[ "\$CLEAN_FLAG" == "true" ]]; then
            echo "Cleaning up before redeployment..."
            pm2 list | grep -E "\${PROJECT}-\${PR_NUMBER}-" | awk '{print \$2}' | xargs -r pm2 delete
            rm -rf /home/techteam/apps/moon-portal-app/\${PROJECT}/build/\${PR_NUMBER}
          fi
          echo "Redeploying for \${PROJECT} PR #\${PR_NUMBER}..."
          export NEXT_PUBLIC_BUILD_PATH=\${PR_NUMBER}/\${PORT}
          cd apps/moon-portal-app/\$PROJECT
          git stash || git reset --hard
          git fetch origin pull/\${PR_NUMBER}/head:\${UNIQUE_ID}
          git checkout \${UNIQUE_ID}
          if ! npm install; then
            echo "ERROR: npm install failed."
            rm -f "$LOCK_FILE"
            exit 1
          fi
          if ! npm run build:preview; then
            echo "ERROR: Build failed."
            rm -f "$LOCK_FILE"
            exit 1
          fi
            pm2 start npm --name "$UNIQUE_ID" -- run start -- -p $PORT || {
              echo "ERROR: Failed to start PM2 process."
              rm -f "$LOCK_FILE"
              exit 1
            }
            git stash pop || echo "No stashed changes to pop."
            rm -f "$LOCK_FILE"
            echo "PREVIEW_PORT=$PORT" > /tmp/preview-port-${PR_NUMBER}.txt
          EOF

      - name: Retrieve Preview Port
        run: |
          ssh -o StrictHostKeyChecking=no techteam@${{ secrets.DROPLET_IP }} "cat /tmp/preview-port-${{ inputs.pr_number }}.txt" > preview-port.txt
          cat preview-port.txt
          PREVIEW_PORT=$(cat preview-port.txt | grep 'PREVIEW_PORT' | cut -d'=' -f2)
          echo "PREVIEW_PORT=\${PREVIEW_PORT}" >> $GITHUB_ENV

      - name: Comment Preview URL
        uses: actions/github-script@v6
        env:
          PORT: ${{ env.PREVIEW_PORT }}
        with:
          script: |
            const project = '${{ matrix.project }}';
            const subdomain = project === 'payzone' ? 'pay' : project;
            const prNumber = '${{ needs.comment_actions.outputs.pr_number || github.event.pull_request.number }}';
            const port = process.env.PORT;
            const uniqueId = `preview-${prNumber}-${port}`;
            const previewUrl = `https://${uniqueId}.${subdomain}.themoondevs.com`;
            github.rest.issues.createComment({
              issue_number: parseInt(prNumber),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ ${project.charAt(0).toUpperCase() + project.slice(1)} preview available at: [${previewUrl}](${previewUrl})\n\n` +
                    `To redeploy or manage, use comment commands:\n` +
                    `üóëÔ∏è Cleanup: @bot cleanup #${prNumber}\n` +
                    `üîÑ Redeploy: @bot deploy ${project}\n` +
                    `üîí Delete Lock: @bot delete_lock`
            });
