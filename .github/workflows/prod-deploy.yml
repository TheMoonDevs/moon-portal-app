name: Production Deployment

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  determine_project:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-projects.outputs.projects }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed projects
        id: set-projects
        run: |
          git fetch --prune
          git fetch origin +refs/heads/*:refs/remotes/origin/*
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          project_paths=("portal" "payzone" "home")
          projects=()
          home_changed=false
          if echo "$changed_files" | grep -q "^home/"; then
            home_changed=true
          fi
          if echo "$changed_files" | grep -q "^portal/"; then
            projects+=("portal")
          fi
          if echo "$changed_files" | grep -q "^payzone/"; then
            projects+=("payzone")
          fi
          if ! $home_changed && [ ${#projects[@]} -eq 0 ] && echo "$changed_files" | grep -vq "^portal/" && echo "$changed_files" | grep -vq "^payzone/" && echo "$changed_files" | grep -vq "^home/"; then
            projects=("portal" "payzone")
          fi
          echo "Changed projects: ${projects[@]}"
          echo "projects=$(jq -c -n --argjson projects "$(printf '%s\n' "${projects[@]}" | jq -R . | jq -s .)" '$projects')" >> $GITHUB_OUTPUT
      - name: Debug Changed Projects Output
        run: |
          echo "Projects output: ${{ steps.set-projects.outputs.projects }}"

  deploy:
    needs: determine_project
    if: needs.determine_project.outputs.projects != 'null' && needs.determine_project.outputs.projects != '[]'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        project: ${{ fromJson(needs.determine_project.outputs.projects) }}
      max-parallel: 1 # Ensure deployments run sequentially
    concurrency:
      group: main-deployment # Queue all deployments into a single group
      cancel-in-progress: false

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy Prod to DigitalOcean
        run: |
          ssh -o StrictHostKeyChecking=no techteam@${{ secrets.DROPLET_IP }} << "EOF"
            LOCK_FILE="/tmp/deploy/deploy-lock"  # Unified lock file for all projects
            echo "Checking for ongoing deployments..."

            # Wait if the lock file exists
            while [ -f "$LOCK_FILE" ]; do
              echo "Deployment lock exists. Waiting..."
              sleep 10
            done

            mkdir -p /tmp/deploy
            touch "$LOCK_FILE"
            echo "Starting production deployment for project: ${{ matrix.project }}"

            # Change to the project directory
            cd apps/moon-portal-app/${{ matrix.project }}

            # Stash any local changes before pulling the latest changes
            git stash || git reset --hard || true

            # Pull the latest changes
            git checkout main
            git pull origin main || { echo "ERROR: Failed to pull latest changes." >&2; git stash pop || true; rm -f "$LOCK_FILE"; exit 1; }

            # Install dependencies and build with error handling
            if ! npm install; then
              echo "ERROR: npm install failed. Cleaning up..." >&2
              exit 1
            fi
            
            if ! npm run build:prod; then
              echo "ERROR: Build failed. Cleaning up..." >&2
              exit 1
            fi

            cd ../

            if pm2 list | grep -q ${{ matrix.project }}-main; then
              pm2 stop ${{ matrix.project }}-main
            fi

            # Enable dotglob to include hidden files in wildcard matches
            shopt -s dotglob

            cp -r builds/${{ matrix.project }}/prod/main/* builds/${{ matrix.project }}/prod/main-backup
            cp -r ${{ matrix.project }}/.next/standalone/* builds/${{ matrix.project }}/prod/main
            cp -r ${{ matrix.project }}/.next/static builds/${{ matrix.project }}/prod/main/.next/static
            cp -r ${{ matrix.project }}/public builds/${{ matrix.project }}/prod/main/public
            cp ${{ matrix.project }}/.env.prod builds/${{ matrix.project }}/prod/main/.env

            cd builds/${{ matrix.project }}/prod/main

            if [ "${{ matrix.project }}" = "portal" ]; then
              PORT=3001
              export PORT=3001
            elif [ "${{ matrix.project }}" = "payzone" ]; then
              PORT=3002
              export PORT=3002
            fi
            
            # Restart the PM2 process for the project
            if pm2 list | grep -q ${{ matrix.project }}-main ; then
              pm2 restart ${{ matrix.project }}-main --update-env || {
                echo "ERROR: Failed to restart PM2 process. Cleaning up..." >&2
                exit 1
              }
            else
              PORT=$PORT pm2 start node --name ${{ matrix.project }}-main -- server.js || {
                echo "ERROR: Failed to start PM2 process. Cleaning up..." >&2
                exit 1
              }
            fi

            # Apply stashed changes back
            git stash pop || echo "No stashed changes to pop."
            echo "Deployment completed for project: ${{ matrix.project }}"
          EOF

      - name: Fall back to previous version
        if: failure() || cancelled()
        run: |
          ssh -o StrictHostKeyChecking=no techteam@${{ secrets.DROPLET_IP }} << "EOF"
            cd apps/moon-portal-app/builds/${{ matrix.project }}/prod
            pm2 stop ${{ matrix.project }}-main
            rm -rf main

            # Enable dotglob to include hidden files in wildcard matches
            shopt -s dotglob

            mkdir -p main
            cp -r main-backup/* main
            pm2 restart ${{ matrix.project }}-main
          EOF
          
      - name: Set domain output
        id: set-domain
        run: |
          if [ "${{ matrix.project }}" = "portal" ]; then
            DOMAIN="portal.themoondevs.com"
          elif [ "${{ matrix.project }}" = "payzone" ]; then
            DOMAIN="pay.themoondevs.com"
          else
            echo "ERROR: Unknown project name. Exiting..." >&2
            exit 1
          fi

          echo "::set-output name=domain::${DOMAIN}"
      
      - uses: actions/checkout@master
      
      - name: Lighthouse Check
        uses: foo-software/lighthouse-check-action@master
        with:
          urls: ${{ steps.set-domain.outputs.domain }}

      - name: Clean up deployment lock
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no techteam@${{ secrets.DROPLET_IP }} << "EOF"
            LOCK_FILE="/tmp/deploy/deploy-lock"
            rm -f "$LOCK_FILE"
            git stash pop || echo "No stashed changes to pop."
          EOF
