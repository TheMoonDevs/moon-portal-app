name: Auto Label PR
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  label:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Label PR based on changed files
        uses: actions/github-script@v6
        with:
          script: |
            const labels = new Set();
            const changedFiles = await github.paginate(
              github.rest.pulls.listFiles,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
              }
            );
            const fileNames = changedFiles.map(f => f.filename);

            // Define file path checks for each project
            const projectPaths = ['portal', 'payzone', 'home'];
            const frontendPaths = ['app', 'components', 'public', 'styles', 'utils'];
            const backendPaths = ['app/api', 'prisma'];

            const isFrontend = fileNames.some(f =>
              projectPaths.some(project =>
                frontendPaths.some(path => f.startsWith(`${project}/${path}`)) &&
                !backendPaths.some(path => f.startsWith(`${project}/${path}`))
              )
            );

            const isBackend = fileNames.some(f =>
              projectPaths.some(project =>
                backendPaths.some(path => f.startsWith(`${project}/${path}`))
              )
            );

            // Determine which labels to add
            if (isFrontend && isBackend) {
              labels.add("fullstack");
            } else if (isFrontend) {
              labels.add("frontend");
            } else if (isBackend) {
              labels.add("backend");
            } else {
              labels.add("other");
            }

            // Apply labels to the pull request if any were identified
            if (labels.size > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: Array.from(labels),
              });
            }
