name: PR Preview Deployment

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, closed]

  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write

jobs:
  determine_project:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-projects.outputs.projects }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed projects
        id: set-projects
        run: |
          git fetch --prune
          git fetch origin +refs/heads/*:refs/remotes/origin/*

          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          project_paths=("portal" "payzone" "home")
          projects=()
          home_changed=false

          if echo "$changed_files" | grep -q "^home/"; then
            home_changed=true
          fi

          if echo "$changed_files" | grep -q "^portal/"; then
            projects+=("portal")
          fi
          if echo "$changed_files" | grep -q "^payzone/"; then
            projects+=("payzone")
          fi

          if ! $home_changed && [ ${#projects[@]} -eq 0 ] && echo "$changed_files" | grep -vq "^portal/" && echo "$changed_files" | grep -vq "^payzone/" && echo "$changed_files" | grep -vq "^home/"; then
            projects=("portal" "payzone")
          fi

          echo "Changed projects: ${projects[@]}"
          echo "projects=$(jq -c -n --argjson projects "$(printf '%s\n' "${projects[@]}" | jq -R . | jq -s .)" '$projects')" >> $GITHUB_OUTPUT

      - name: Debug Changed Projects Output
        run: |
          echo "Projects output: ${{ steps.set-projects.outputs.projects }}"

  deploy_preview:
    needs: [determine_project]
    if: needs.determine_project.outputs.projects != 'null' && needs.determine_project.outputs.projects != '[]' || needs.comment_actions.outputs.action == 'deploy'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        project: ${{ fromJson(needs.determine_project.outputs.projects) }}
    concurrency:
      group: "${{ matrix.project }}-${{ needs.comment_actions.outputs.pr_number || github.event.pull_request.number }}"
      cancel-in-progress: false

    steps:
      - name: Debug Outputs for Deploy Preview
        run: |
          echo "Projects output: ${{ needs.determine_project.outputs.projects }}"
          echo "Comment action: ${{ needs.comment_actions.outputs.action }}"
          echo "Project for deployment: ${{ matrix.project }}"

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy or Redeploy Preview on DigitalOcean
        run: |
          PR_NUMBER=${{ needs.comment_actions.outputs.pr_number || github.event.pull_request.number }}
          PROJECT=${{ matrix.project }}
          CLEAN_FLAG=${{ needs.comment_actions.outputs.clean_flag }}
          echo "Starting deployment for PR #$PR_NUMBER - Project: $PROJECT"

          ssh -o StrictHostKeyChecking=no techteam@${{ secrets.DROPLET_IP }} << "EOF"
            LOCK_FILE="/tmp/deploy/deploy-lock"

            # Find the first available port starting from 8000
            START_PORT=8000
            MAX_PORT=10000
            PORT=$START_PORT
            while [ $PORT -lt $MAX_PORT ]; do
              if ! ss -tlnp | grep ":${PORT} " > /dev/null; then
                break
              fi
              PORT=$((PORT + 1))
            done

            if [ $PORT -ge $MAX_PORT ]; then
              echo "ERROR: No available ports found."
              rm -f "$LOCK_FILE"
              exit 1
            fi

            UNIQUE_ID="${PROJECT}-${PR_NUMBER}-$PORT"

            if [[ "$CLEAN_FLAG" == "true" ]]; then
              echo "Cleaning up before redeployment..."
              pm2 list | grep -E "${PROJECT}-${PR_NUMBER}-" | awk '{print $2}' | xargs -r pm2 delete
              rm -rf /home/techteam/apps/moon-portal-app/portal/build/pr-${PR_NUMBER}
              rm -rf /home/techteam/apps/moon-portal-app/payzone/build/pr-${PR_NUMBER}
            fi

            echo "Redeploying for $PROJECT PR #$PR_NUMBER..."

            export NEXT_PUBLIC_BUILD_PATH=${PR_NUMBER}/$UNIQUE_ID

            cd apps/moon-portal-app/$PROJECT
            git stash || git reset --hard
            git fetch origin pull/$PR_NUMBER/head:$UNIQUE_ID
            git checkout $UNIQUE_ID

            if ! npm install; then
              echo "ERROR: npm install failed."
              rm -f "$LOCK_FILE"
              exit 1
            fi

            if ! npm run build:preview; then
              echo "ERROR: Build failed."
              rm -f "$LOCK_FILE"
              exit 1
            fi

            pm2 start npm --name "$UNIQUE_ID" -- run start -- -p $PORT || {
              echo "ERROR: Failed to start PM2 process."
              rm -f "$LOCK_FILE"
              exit 1
            }

            git stash pop || echo "No stashed changes to pop."
            rm -f "$LOCK_FILE"
            echo "Redeployment completed for PR #$PR_NUMBER - Project: $PROJECT on port $PORT."
          EOF

      - name: Comment Preview URL
        uses: actions/github-script@v6
        with:
          script: |
            const project = '${{ matrix.project }};
            const subdomain = '${{ matrix.project }} === "payzone" ? "pay" : "portal"';
            const prNumber = '${{ needs.comment_actions.outputs.pr_number || github.event.pull_request.number }}';
            const port = parseInt(process.env.PORT);
            const uniqueId = ${project}-pr-${prNumber}-${port};
            const previewUrl = `https://${uniqueId}.${subdomain}.themoondevs.com`;
            github.rest.issues.createComment({
              issue_number: parseInt(prNumber),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ ${project.charAt(0).toUpperCase() + project.slice(1)} preview available at: [${previewUrl}](${previewUrl})\n\n` +
                    `To redeploy or manage, use comment commands:\n` +
                    `üóëÔ∏è Cleanup: \`@bot cleanup #${prNumber}\`\n` +
                    `üîÑ Redeploy: \`@bot deploy ${project}\`\n` +
                    `üîí Delete Lock: \`@bot delete_lock\``
            });
