name: PR Preview Deployment

on:
  pull_request:
    types: [opened, closed]

  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write

jobs:
  determine_project:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-projects.outputs.projects }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed projects
        id: set-projects
        run: |
          git fetch --prune
          git fetch origin +refs/heads/*:refs/remotes/origin/*

          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          project_paths=("portal" "payzone" "home")
          projects=()
          home_changed=false

          if echo "$changed_files" | grep -q "^home/"; then
            home_changed=true
          fi

          if echo "$changed_files" | grep -q "^portal/"; then
            projects+=("portal")
          fi
          if echo "$changed_files" | grep -q "^payzone/"; then
            projects+=("payzone")
          fi

          if ! $home_changed && [ ${#projects[@]} -eq 0 ] && echo "$changed_files" | grep -vq "^portal/" && echo "$changed_files" | grep -vq "^payzone/" && echo "$changed_files" | grep -vq "^home/"; then
            projects=("portal" "payzone")
          fi

          echo "projects=$(jq -c -n --argjson projects "$(printf '%s\n' "${projects[@]}" | jq -R . | jq -s .)" '$projects')" >> $GITHUB_OUTPUT

  comment_actions:
    if: contains(github.event.comment.body, '@bot')
    runs-on: ubuntu-latest
    steps:
      - name: Extract Action, Project, and Optional PR Number
        id: extract
        run: |
         # Extract the action word following @bot
         ACTION=$(echo "${{ github.event.comment.body }}" | awk '{for(i=1;i<=NF;i++) if ($i ~ /^@bot/) {print $(i+1); exit}}')

         # Extract the project (looks for "portal", "payzone", or defaults to "portal" if none specified)
         PROJECT=$(echo "${{ github.event.comment.body }}" | grep -Eo "\b(portal|payzone)\b" || echo "portal")

         # Determine if the clean flag is present (--clean)
         CLEAN_FLAG=$(echo "${{ github.event.comment.body }}" | grep -qE "--clean" && echo "true" || echo "false")

         # Extract PR number from the comment, or fall back to the issue number if not explicitly mentioned
         PR_NUMBER_COMMENT=$(echo "${{ github.event.comment.body }}" | grep -oE '#([0-9]+)' | cut -d'#' -f2)
         PR_NUMBER=${PR_NUMBER_COMMENT:-${{ github.event.issue.number }}}

          echo "ACTION=$ACTION" >> $GITHUB_ENV
          echo "PROJECT=$PROJECT" >> $GITHUB_ENV
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "CLEAN_FLAG=$CLEAN_FLAG" >> $GITHUB_ENV

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Execute Action
        run: |
          ssh -o StrictHostKeyChecking=no techteam@${{ secrets.DROPLET_IP }} << "EOF"
            LOCK_FILE="/tmp/deploy/deploy-lock"

            # Find the first available port starting from 8000
            START_PORT=8000
            MAX_PORT=10000
            PORT=$START_PORT
            while [ $PORT -lt $MAX_PORT ]; do
              if ! ss -tlnp | grep ":${PORT} " > /dev/null; then
                break
              fi
              PORT=$((PORT + 1))
            done

            if [ $PORT -ge $MAX_PORT ]; then
              echo "ERROR: No available ports found."
              rm -f "$LOCK_FILE"
              exit 1
            fi

            UNIQUE_ID="${{ env.PROJECT }}-${{ env.PR_NUMBER }}-$PORT"

            if [ "${{ env.ACTION }}" = "cleanup" ] && [ -n "${{ env.PROJECT }}" ] && [ -n "${{ env.PR_NUMBER }}" ]; then
              echo "Starting cleanup for $UNIQUE_ID ..."
              pm2 delete $UNIQUE_ID || true
              rm -rf /home/techteam/apps/moon-portal-app/portal/build/pr-${{ env.PR_NUMBER }}/$UNIQUE_ID
              rm -rf /home/techteam/apps/moon-portal-app/payzone/build/pr-${{ env.PR_NUMBER }}/$UNIQUE_ID
              echo "Cleanup completed."
            elif [ "${{ env.ACTION }}" = "deploy" ] && [ -n "${{ env.PR_NUMBER }}" ]; then
              if [ "${{ env.CLEAN_FLAG }}" = "true" ]; then
                echo "Cleaning up before redeployment..."
                pm2 list | grep -E "${{ env.PROJECT }}-${{ env.PR_NUMBER }}-" | awk '{print $2}' | xargs -r pm2 delete
                rm -rf /home/techteam/apps/moon-portal-app/portal/build/pr-${{ env.PR_NUMBER }}
                rm -rf /home/techteam/apps/moon-portal-app/payzone/build/pr-${{ env.PR_NUMBER }}
              fi

              echo "Redeploying for ${{ env.PROJECT }} PR #${{ env.PR_NUMBER }}..."

              export NEXT_PUBLIC_BUILD_PATH=${{ env.PR_NUMBER }}/$UNIQUE_ID

              cd apps/moon-portal-app/${{ env.PROJECT }}
              git stash || git reset --hard
              git fetch origin pull/${{ env.PR_NUMBER }}/head:$UNIQUE_ID
              git checkout $UNIQUE_ID

              if ! npm install; then
                echo "ERROR: npm install failed."
                rm -f "$LOCK_FILE"
                exit 1
              fi

              if ! npm run build:preview; then
                echo "ERROR: Build failed."
                rm -f "$LOCK_FILE"
                exit 1
              fi

              pm2 start npm --name "$UNIQUE_ID" -- run start -- -p $PORT || {
                echo "ERROR: Failed to start PM2 process."
                rm -f "$LOCK_FILE"
                exit 1
              }

              git stash pop || echo "No stashed changes to pop."
              rm -f "$LOCK_FILE"
              echo "Redeployment completed for PR #${{ env.PR_NUMBER }} - Project: ${{ env.PROJECT }} on port $PORT."
            elif [ "${{ env.ACTION }}" = "delete_lock" ]; then
              if [ -f "$LOCK_FILE" ]; then
                rm -f "$LOCK_FILE"
                echo "Deploy lock file removed."
              else
                echo "No deploy lock file found."
              fi
            else
              echo "Invalid action or missing parameters."
            fi
          EOF

  deploy_preview:
    needs: determine_project
    if: needs.determine_project.outputs.projects != '[]' && (github.event.action == 'opened' || (github.event.action == 'created' && contains(github.event.comment.body, '@bot deploy')))
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        project: ${{ fromJson(needs.determine_project.outputs.projects) }}
    concurrency:
      group: "${{ matrix.project }}-${{ github.event.pull_request.number }}"
      cancel-in-progress: false

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy or Redeploy Preview on DigitalOcean
        run: |
          echo "Starting deployment for PR #${{ github.event.pull_request.number }} - Project: ${{ matrix.project }}"
          ssh -o StrictHostKeyChecking=no techteam@${{ secrets.DROPLET_IP }} << "EOF"
            LOCK_FILE="/tmp/deploy/deploy-lock"

            # Find the first available port starting from 8000
            START_PORT=8000
            MAX_PORT=10000
            PORT=$START_PORT
            while [ $PORT -lt $MAX_PORT ]; do
              if ! ss -tlnp | grep ":${PORT} " > /dev/null; then
                break
              fi
              PORT=$((PORT + 1))
            done

            if [ $PORT -ge $MAX_PORT ]; then
              echo "ERROR: No available ports found."
              rm -f "$LOCK_FILE"
              exit 1
            fi

            UNIQUE_ID="${{ env.PROJECT }}-${{ env.PR_NUMBER }}-$PORT"

            echo "Cleaning up before redeployment..."
            pm2 list | grep -E "${{ env.PROJECT }}-${{ env.PR_NUMBER }}-" | awk '{print $2}' | xargs -r pm2 delete
            rm -rf /home/techteam/apps/moon-portal-app/portal/build/pr-${{ env.PR_NUMBER }}
            rm -rf /home/techteam/apps/moon-portal-app/payzone/build/pr-${{ env.PR_NUMBER }}

            echo "Redeploying for ${{ env.PROJECT }} PR #${{ env.PR_NUMBER }}..."

            export NEXT_PUBLIC_BUILD_PATH=${{ env.PR_NUMBER }}/$UNIQUE_ID

            cd apps/moon-portal-app/${{ env.PROJECT }}
            git stash || git reset --hard
            git fetch origin pull/${{ env.PR_NUMBER }}/head:$UNIQUE_ID
            git checkout $UNIQUE_ID

            if ! npm install; then
              echo "ERROR: npm install failed."
              rm -f "$LOCK_FILE"
              exit 1
            fi

            if ! npm run build:preview; then
              echo "ERROR: Build failed."
              rm -f "$LOCK_FILE"
              exit 1
            fi

            pm2 start npm --name "$UNIQUE_ID" -- run start -- -p $PORT || {
              echo "ERROR: Failed to start PM2 process."
              rm -f "$LOCK_FILE"
              exit 1
            }

            git stash pop || echo "No stashed changes to pop."
            rm -f "$LOCK_FILE"
            echo "Redeployment completed for PR #${{ env.PR_NUMBER }} - Project: ${{ env.PROJECT }} on port $PORT."
          EOF

      - name: Comment Preview URL
        uses: actions/github-script@v6
        with:
          script: |
            const project = '${{ matrix.project }}';
            const prNumber = '${{ github.event.pull_request.number }}';
            const uniqueId = 'init';
            const port = parseInt(process.env.PORT);
            const previewUrl = `https://${project}-pr-${prNumber}-${uniqueId}.${project}.themoondevs.com:${port}`;
            github.rest.issues.createComment({
              issue_number: parseInt(prNumber),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 ${project.charAt(0).toUpperCase() + project.slice(1)} preview available at: [${previewUrl}](${previewUrl})\n\n` +
                    `To redeploy or manage, use comment commands:\n` +
                    `🗑️ Cleanup: \`@bot cleanup #${prNumber}\`\n` +
                    `🔄 Redeploy: \`@bot deploy ${project}\`\n` +
                    `🔒 Delete Lock: \`@bot delete_lock\``
            });
