name: PR Preview Deployment

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, closed]

permissions:
  contents: write
  pull-requests: write

jobs:
  determine_project:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-projects.outputs.projects }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed projects
        id: set-projects
        run: |
          # Fetch all history for accurate diffing
          git fetch --prune --unshallow || true
          git fetch origin +refs/heads/*:refs/remotes/origin/*
          
          # Determine the base for diffing
          base_ref="${{ github.event.pull_request.base.sha }}"
          head_ref="${{ github.event.pull_request.head.sha }}"

          # Get the list of changed files
          changed_files=$(git diff --name-only $base_ref $head_ref)

          # Determine if changes are in the payzone or portal directories
          projects=()
          if echo "$changed_files" | grep -q "^payzone/"; then projects+=("payzone"); fi
          if echo "$changed_files" | grep -q "^portal/"; then projects+=("portal"); fi

          # Output the projects array as a JSON string
          echo "projects=$(jq -c -n --argjson projects "$(printf '%s\n' "${projects[@]}" | jq -R . | jq -s .)" '$projects')" >> $GITHUB_OUTPUT

  deploy_preview:
    needs: determine_project
    if: needs.determine_project.outputs.projects != '[]' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.determine_project.outputs.projects) }}
    concurrency:
      group: "${{ matrix.project }}-${{ github.event.pull_request.number }}"
      cancel-in-progress: false  # Do not cancel; wait for completion

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Ensure Clean Working Directory
        run: |
          # Ensure there are no uncommitted changes
          if [ -n "$(git status --porcelain)" ]; then
            echo "ERROR: Working directory is not clean. Please commit or stash your changes." >&2
            exit 1
          fi

      - name: Wait for Portal Deployment
        if: matrix.project == 'payzone'
        run: |
          echo "Waiting for portal deployment to finish if it's in progress..."
          for i in {1..60}; do  # Wait up to 10 minutes (10 seconds each)
            if ! pm2 list | grep -q "portal-pr-${{ github.event.pull_request.number }}"; then
              break
            fi
            echo "Portal is still building. Waiting..."
            sleep 10
          done

      - name: Deploy to DigitalOcean
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          LOCK_FILE="/tmp/deploy-${{ matrix.project }}-lock"
          echo "Checking for ongoing deployments..."

          # Default wait time before starting Payzone deployment
          if [ "${{ matrix.project }}" = "payzone" ]; then
            echo "Waiting for 10 seconds before starting Payzone build..."
            sleep 10
          fi

          # Wait if the lock file exists
          while [ -f "$LOCK_FILE" ]; do
            echo "Deployment lock exists for ${{ matrix.project }}. Waiting..."
            sleep 10  # Wait for 10 seconds before checking again
          done

          touch "$LOCK_FILE"

          echo "Starting deployment for PR #${{ github.event.pull_request.number }} - Project: ${{ matrix.project }}"
          # ls
          # cd apps/moon-portal-app/${{ matrix.project }}
          cd ${{ matrix.project }}
          
          # Fetch and check out the PR
          if ! git fetch origin pull/$PR_NUMBER/head:pr-$PR_NUMBER; then
            echo "ERROR: Failed to fetch the pull request." >&2
            rm -f "$LOCK_FILE"
            exit 1
          fi
          
          # Ensure clean state before checkout
          if [ -n "$(git status --porcelain)" ]; then
            echo "ERROR: Working directory is not clean. Please commit or stash your changes." >&2
            rm -f "$LOCK_FILE"
            exit 1
          fi

          if ! git checkout pr-$PR_NUMBER; then
            echo "ERROR: Failed to checkout PR #${{ github.event.pull_request.number }}." >&2
            rm -f "$LOCK_FILE"
            exit 1
          fi

          # Handle errors during installation and build
          if ! npm install; then
            echo "ERROR: npm install failed. Cleaning up..." >&2
            rm -f "$LOCK_FILE"
            exit 1
          fi

          if ! npm run build; then
            echo "ERROR: Build failed. Cleaning up..." >&2
            rm -f "$LOCK_FILE"
            exit 1
          fi

          if [ "${{ matrix.project }}" = "portal" ]; then
            PORT=$((8000 + ${{ github.event.number }}))
          else
            PORT=$((9000 + ${{ github.event.number }}))
          fi

          # PM2 management with error handling
          if pm2 list | grep -q "${{ matrix.project }}-pr-$PR_NUMBER"; then
            if ! pm2 restart ${{ matrix.project }}-pr-$PR_NUMBER --update-env; then
              echo "ERROR: Failed to restart PM2 process. Cleaning up..." >&2
              pm2 delete ${{ matrix.project }}-pr-$PR_NUMBER || true
              rm -f "$LOCK_FILE"
              exit 1
            fi
          else
            if ! pm2 start npm --name ${{ matrix.project }}-pr-$PR_NUMBER -- run start -- -p $PORT; then
              echo "ERROR: Failed to start PM2 process. Cleaning up..." >&2
              rm -f "$LOCK_FILE"
              exit 1
            fi
          fi

          rm -f "$LOCK_FILE"
          echo "Deployment completed for PR #${{ github.event.pull_request.number }} - Project: ${{ matrix.project }}"

      - name: Comment Preview URL
        uses: actions/github-script@v6
        with:
          script: |
            const project = '${{ matrix.project }}';
            const prNumber = '${{ github.event.pull_request.number }}';
            const previewUrl = `https://${project}-pr-${prNumber}.${project}.themoondevs.com`;
            const body = `üöÄ ${project.charAt(0).toUpperCase() + project.slice(1)} preview available at: [${previewUrl}](${previewUrl})\n\n` +
                         `üóëÔ∏è **Remove this preview**: [Click here](${{ github.server_url }}/${{ github.repository }}/actions/workflows/manual-actions.yml/dispatch?action=cleanup&pr_number=${prNumber})`;
            github.rest.issues.createComment({
              issue_number: parseInt(prNumber),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  cleanup_on_close:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Remove Preview Deployment
        run: |
          ssh -o StrictHostKeyChecking=no techteam@${{ secrets.DROPLET_IP }} <<EOF
            pm2 delete payzone-pr-${{ github.event.number }} || true
            pm2 delete portal-pr-${{ github.event.number }} || true
          EOF
