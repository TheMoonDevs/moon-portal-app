name: PR Preview Deployment

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, closed]
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write

jobs:
  determine_project:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-projects.outputs.projects }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed projects
        id: set-projects
        run: |
          git fetch --prune
          git fetch origin +refs/heads/*:refs/remotes/origin/*

          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          project_paths=("portal" "payzone" "home")
          projects=()
          home_changed=false

          if echo "$changed_files" | grep -q "^home/"; then
            home_changed=true
          fi

          if echo "$changed_files" | grep -q "^portal/"; then
            projects+=("portal")
          fi
          if echo "$changed_files" | grep -q "^payzone/"; then
            projects+=("payzone")
          fi

          if ! $home_changed && [ ${#projects[@]} -eq 0 ] && echo "$changed_files" | grep -vq "^portal/" && echo "$changed_files" | grep -vq "^payzone/" && echo "$changed_files" | grep -vq "^home/"; then
            projects=("portal" "payzone")
          fi

          echo "Changed projects: ${projects[@]}"
          echo "projects=$(jq -c -n --argjson projects "$(printf '%s\n' "${projects[@]}" | jq -R . | jq -s .)" '$projects')" >> $GITHUB_OUTPUT

      - name: Debug Changed Projects Output
        run: |
          echo "Projects output: ${{ steps.set-projects.outputs.projects }}"

  comment_actions:
    if: contains(github.event.comment.body, '@bot')
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.extract.outputs.action }}
      project: ${{ steps.extract.outputs.project }}
      pr_number: ${{ steps.extract.outputs.pr_number }}
      clean_flag: ${{ steps.extract.outputs.clean_flag }}
    steps:
      - name: Extract Action, Project, and Optional PR Number
        id: extract
        run: |
          ACTION=$(echo "${{ github.event.comment.body }}" | awk '{for(i=1;i<=NF;i++) if ($i ~ /^@bot/) {print $(i+1); exit}}')
          PROJECT=$(echo "${{ github.event.comment.body }}" | grep -Eo "\b(portal|payzone)\b" || echo "portal")
          CLEAN_FLAG=$(echo "${{ github.event.comment.body }}" | grep -qE "--clean" && echo "true" || echo "false")
          PR_NUMBER_COMMENT=$(echo "${{ github.event.comment.body }}" | grep -oE '#([0-9]+)' | cut -d'#' -f2)
          PR_NUMBER=${PR_NUMBER_COMMENT:-${{ github.event.issue.number }}}

          echo "Extracted Action: $ACTION"
          echo "Extracted Project: $PROJECT"
          echo "Extracted PR Number: $PR_NUMBER"
          echo "Clean Flag: $CLEAN_FLAG"

          echo "::set-output name=action::$ACTION"
          echo "::set-output name=project::$PROJECT"
          echo "::set-output name=pr_number::$PR_NUMBER"
          echo "::set-output name=clean_flag::$CLEAN_FLAG"

  deploy_preview:
    needs: [determine_project, comment_actions]
    if: always() && (needs.determine_project.outputs.projects != 'null' && needs.determine_project.outputs.projects != '[]' || needs.comment_actions.outputs.action == 'deploy')
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        project: ${{ fromJson(needs.determine_project.outputs.projects) }}
    concurrency:
      group: "${{ matrix.project }}-${{ needs.comment_actions.outputs.pr_number || github.event.pull_request.number }}"
      cancel-in-progress: false

    steps:
      - name: Debug Outputs for Deploy Preview
        run: |
          echo "Projects output: ${{ needs.determine_project.outputs.projects }}"
          echo "Comment action: ${{ needs.comment_actions.outputs.action }}"
          echo "Project for deployment: ${{ matrix.project }}"

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy or Redeploy Preview on DigitalOcean
        run: |

          ssh -o StrictHostKeyChecking=no techteam@${{ secrets.DROPLET_IP }} << EOF
          LOCK_FILE="/tmp/deploy/deploy-lock"
          PR_NUMBER=${{ github.event.pull_request.number || needs.comment_actions.outputs.pr_number }}
          PROJECT=${{ matrix.project }}
          CLEAN_FLAG=${{ needs.comment_actions.outputs.clean_flag }}
          echo "Starting deployment for PR #$PR_NUMBER - Project: $PROJECT"
          START_PORT=8000
          MAX_PORT=10000
          PORT=$START_PORT

          while [ "\$PORT" -lt "\$MAX_PORT" ]; do
            if ! ss -tlnp | grep ":\$PORT " > /dev/null; then
              break
            fi
            PORT=\$((PORT + 1))
          done

          echo "Selected port: \$PORT"
          echo "PREVIEW_PORT=\$PORT" >> /tmp/preview-port-\$PR_NUMBER.txt

          UNIQUE_ID="${PROJECT}-${PR_NUMBER}-\$PORT"

          if [[ "$CLEAN_FLAG" == "true" ]]; then
            pm2 list | grep -E "${PROJECT}-${PR_NUMBER}-" | awk '{print \$2}' | xargs -r pm2 delete
            rm -rf /home/techteam/apps/moon-portal-app/portal/build/pr-\$PR_NUMBER
            rm -rf /home/techteam/apps/moon-portal-app/payzone/build/pr-\$PR_NUMBER
          fi

          cd apps/moon-portal-app/\$PROJECT
          git stash || git reset --hard
          git fetch origin pull/\$PR_NUMBER/head:\$UNIQUE_ID
          git checkout \$UNIQUE_ID
          if ! npm install; then
            echo "ERROR: npm install failed."
            rm -f "$LOCK_FILE"
            exit 1
          fi
          if ! npm run build:preview; then
            echo "ERROR: Build failed."
            rm -f "$LOCK_FILE"
            exit 1
          fi
          pm2 start npm --name "$UNIQUE_ID" -- run start -- -p $PORT || {
            echo "ERROR: Failed to start PM2 process."
            rm -f "$LOCK_FILE"
            exit 1}
          git stash pop || echo "No stashed changes to pop."
          rm -f "$LOCK_FILE"
          echo "Redeployment completed for PR #$PR_NUMBER - Project: $PROJECT on port $PORT."

          echo "PREVIEW_PORT=\$PORT"
          EOF

      - name: Retrieve Preview Port
        run: |
          ssh -o StrictHostKeyChecking=no techteam@${{ secrets.DROPLET_IP }} "cat /tmp/preview-port-${{ github.event.pull_request.number }}.txt" > preview-port.txt
          cat preview-port.txt
          echo "PREVIEW_PORT=$(cat preview-port.txt | grep 'PREVIEW_PORT' | cut -d'=' -f2)" >> $GITHUB_ENV

      - name: Comment Preview URL
        uses: actions/github-script@v6
        env:
          PORT: ${{ env.PREVIEW_PORT }}
        with:
          script: |
            const project = '${{ matrix.project }}';
            const subdomain = project === 'payzone' ? 'pay' : project;
            const prNumber = '${{ needs.comment_actions.outputs.pr_number || github.event.pull_request.number }}';
            const port = process.env.PORT;
            const uniqueId = `${project}-pr-${prNumber}-${port}`;
            const previewUrl = `https://${uniqueId}.${subdomain}.themoondevs.com`;
            github.rest.issues.createComment({
              issue_number: parseInt(prNumber),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ ${project.charAt(0).toUpperCase() + project.slice(1)} preview available at: [${previewUrl}](${previewUrl})\n\n` +
                    `To redeploy or manage, use comment commands:\n` +
                    `üóëÔ∏è Cleanup: @bot cleanup #${prNumber}\n` +
                    `üîÑ Redeploy: @bot deploy ${project}\n` +
                    `üîí Delete Lock: @bot delete_lock`
            });

  cleanup_on_pr_close:
    if: github.event.pull_request.merged == true || github.event.pull_request.closed == true
    runs-on: ubuntu-latest
    needs: [determine_project]
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Cleanup Deployments for Closed PR
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "Cleaning up deployments for closed PR #$PR_NUMBER"

          ssh -o StrictHostKeyChecking=no techteam@${{ secrets.DROPLET_IP }} << EOF
          pm2 list | grep -E "-pr-${PR_NUMBER}-" | awk '{print \$2}' | xargs -r pm2 delete
          rm -rf /home/techteam/apps/moon-portal-app/portal/build/pr-\${PR_NUMBER}
          rm -rf /home/techteam/apps/moon-portal-app/payzone/build/pr-\${PR_NUMBER}
          echo "Cleaned up PR #$PR_NUMBER."
          EOF
