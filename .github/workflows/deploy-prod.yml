name: Production Deployment

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  determine_project:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-projects.outputs.projects }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed projects
        id: set-projects
        run: |
          git fetch --prune
          git fetch origin +refs/heads/*:refs/remotes/origin/*
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          projects=()
          if echo "$changed_files" | grep -q "^portal/"; then
            projects+=("portal")
          fi
          if echo "$changed_files" | grep -q "^payzone/"; then
            projects+=("payzone")
          fi
          echo "projects=$(printf '%s\n' "${projects[@]}" | jq -R . | jq -s .)" >> $GITHUB_OUTPUT

      - name: Debug Changed Projects Output
        run: |
          echo "Projects output: ${{ steps.set-projects.outputs.projects }}"

  build_and_deploy:
    needs: determine_project
    if: needs.determine_project.outputs.projects != 'null' && needs.determine_project.outputs.projects != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.determine_project.outputs.projects) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        working-directory: ./${{ matrix.project }}
        run: npm install

      - name: Build project
        working-directory: ./${{ matrix.project }}
        run: npm run build

      - name: Prepare deployment files
        run: |
          # Create the deployment structure in GitHub Actions
          mkdir -p build/${{ matrix.project }}/main/.next/static
          mkdir -p build/${{ matrix.project }}/main/public

          # Move and rename build files to the "main" folder structure
          cp -r ./${{ matrix.project }}/.next/standalone/* build/${{ matrix.project }}/main
          cp -r ./${{ matrix.project }}/.next/static/* build/${{ matrix.project }}/main/.next/static
          cp -r ./${{ matrix.project }}/public/* build/${{ matrix.project }}/main/public

      - name: Archive deployment files
        run: |
          tar -czf prod_${{ matrix.project }}.tar.gz -C build/${{ matrix.project }} main

      - name: Upload to DigitalOcean
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "prod_${{ matrix.project }}.tar.gz"
          target: "/tmp/"

      - name: Deploy on DigitalOcean
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} << "EOF"
            # PROJECT_DIR="apps/moon-portal-app/builds/${{ matrix.project }}/prod"
            PROJECT_DIR="apps/builds/${{ matrix.project }}/prod"
            MAIN_DIR="$PROJECT_DIR/main"
            BACKUP_DIR="$PROJECT_DIR/main-backup"
            PORT=0

            # Determine the port
            if [ "${{ matrix.project }}" = "portal" ]; then
              PORT=3001
            elif [ "${{ matrix.project }}" = "payzone" ]; then
              PORT=3002
            fi

            # Create directories if they don't exist
            mkdir -p "$MAIN_DIR" "$BACKUP_DIR"
            
            # Unpack the deployment files directly to the MAIN_DIR
            tar -xzf /tmp/prod_${{ matrix.project }}.tar.gz -C "$PROJECT_DIR"
            
            # Ensure .env file is copied from a secure central location
            cp "apps/moon-portal-app/${{matrix.project}}/.env.prod" "$MAIN_DIR/.env"

            # Remove temporary upload
            rm -rf /tmp/prod_${{ matrix.project }}.tar.gz

            # Start or restart PM2 for the app
            if pm2 list | grep -q "${{ matrix.project }}-main"; then
              pm2 restart "${{ matrix.project }}-main" --update-env
            else
              cd "$MAIN_DIR"
              PORT=$PORT pm2 start node --name "${{ matrix.project }}-main" -- "server.js"
            fi

            echo "Deployment completed for project: ${{ matrix.project }}"
          EOF

      - name: Set domain output
        id: set-domain
        run: |
          if [ "${{ matrix.project }}" = "portal" ]; then
            DOMAIN="portal.themoondevs.com"
          elif [ "${{ matrix.project }}" = "payzone" ]; then
            DOMAIN="pay.themoondevs.com"
          else
            exit 1
          fi
          echo "::set-output name=domain::${DOMAIN}"

      - name: Lighthouse Check
        uses: foo-software/lighthouse-check-action@master
        with:
          urls: https://${{ steps.set-domain.outputs.domain }}
