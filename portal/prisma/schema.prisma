// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  username       String
  password       String
  passphrase     String?
  email          String?
  name           String?
  avatar         String?
  banner         String?
  description     String?
  userType       USERTYPE?     @default(MEMBER)
  role           USERROLE?     @default(CORETEAM)
  vertical       USERVERTICAL? @default(DEV)
  house          HOUSEID?      @default(PRODUCT_TECH)
  status         USERSTATUS?   @default(ACTIVE)
  industry       USERINDUSTRY?
  isAdmin        Boolean       @default(false)
  timezone       String?
  country        String?
  createdLinks   Link[]        @relation("CreatedLinks")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  workData       Json?
  personalData   Json?
  payData        Json?
  thirdPartyData Json?
  slackId        String?
  positionTitle  String?
  buffBadge      BuffBadge[]
}

model Candidate {
  id                     String  @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String
  mobileNumber           Int
  portfolio              String?
  resume                 String?
  applicantAnswers       Json[]
  educationQualification String?
  skillQualification     String?
  workExp                String?
  jobPost                JobPost @relation(fields: [jobPostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobPostId              String  @db.ObjectId
  screeningRound1        Json?
  screeningRound2        Json?
  // result              CandidateResult   @default(PENDING)
}

model JobPost {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  deptName    String
  description String
  defaultReq  Json?
  deptReq     Json?
  adminReq    Json?
  hrReq       Json?
  status      JOBSTATUS   @default(ACTIVE)
  jobpost     JOBPOST     @default(FULLTIME)
  createdAt   DateTime    @default(now())
  Candidate   Candidate[]
}

model Survey {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  username String
  password String
  name     String?
}

model ShortLink {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  slug       String   @unique
  redirectTo String
  params     Json?
  createdAt  DateTime @default(now())
}

model ClientLeadForm {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  teamSize        String?
  industry        String?
  requirementType String?
  budget          Int?
  time            String?
  stage           String?
  contact         Json
  createdAt       DateTime @default(now())
}

// ---------------------------------------QUICKLINKS---------------------------

model DirectoryList  {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  logo        String
  slug        String
  parentDirId String?    @db.ObjectId
  timestamp   DateTime?  @default(now())
  position    Float      @default(1)
  isArchive   Boolean    @default(false)
  clickCount  Int        @default(0)
  tabType     ROOTTYPE?
  type        DIRECTORYTYPE?
  userDirectory UserDirectory[]

  @@index([parentDirId, position])
  @@index([id, slug])
  @@index([position])
}

model UserDirectory {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  directoryId String     @db.ObjectId
  directoryData DirectoryList @relation(fields: [directoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  directoryType USERDIRECTORYTYPE
  clickCount  Int        @default(0)
  timestamp   DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
}

model UserLink {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  linkType    USERLINKTYPE //  Favorited Links or top used or custom_link_list
  linkData    Link         @relation(fields: [linkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  linkId      String       @db.ObjectId
  userId      String
  directoryId String?
  topUsed     Int          @default(0)
  isFavorite  Boolean?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
}

model Link {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  logo            String?
  image           String?
  linkType        String?
  url             String
  clickCount      Int
  isFavorite      Boolean          @default(false)
  rootParentDirId String?          @db.ObjectId
  author          User?            @relation(name: "CreatedLinks", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userLink        UserLink[]
  authorId        String?          @db.ObjectId
  directoryId     String?          @db.ObjectId
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())

  @@index([rootParentDirId])
  @@index([authorId])
  @@map("Links")
}

enum ROOTTYPE {
  DEPARTMENT
  COMMON_RESOURCES
}

enum DIRECTORYTYPE {
 PARENT
}

enum USERDIRECTORYTYPE {
  FAVORITED
  OTHER
}

enum USERLINKTYPE {
  FAVORITED
  TOPUSED
  CUSTOM
}

//------------------------------------------------------------------------------

model ZeroRecords {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String? @db.ObjectId
  config      String?
  year        String?
  allZeros    Json[]
  allMeetings Json[]
}

model WorkLogs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  logType   String?
  userId    String?  @db.ObjectId
  title     String?
  date      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  works     Json[]
}

model Certificate {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  userId    String?  @db.ObjectId
  fileId    String?  @db.ObjectId
  file      Json?
  files     Json[]
  userInfo  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model FileUpload {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String?  @db.ObjectId
  uploadedByUserId String?  @db.ObjectId
  fileName         String?
  mimeType         String?
  fileUrl          String?
  folderName       String?
  fileSize         Int?
  userInfo         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
}

model ConfigData {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  configId   String   @unique
  configType String   @default("")
  configApp  String?  @default("portal")
  configData Json?
  timestamp  DateTime @updatedAt
}

model Article {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  image           String?  
  content         String
  articleUrl      String
  articleType     String
  author          String
  publishDate     DateTime
  categories      String[]

  @@index([title], name: "title_idx")
  @@index([author], name: "author_idx")
}

enum JOBPOST {
  FULLTIME
  PARTTIME
  INTERN
}

enum JOBSTATUS {
  ACTIVE
  INACTIVE
}

enum USERTYPE {
  MEMBER
  CLIENT
}

enum USERSTATUS {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum USERROLE {
  CORETEAM
  ASSOCIATE
  FREELANCER
  INTERN
  TRIAL_CANDIDATE
}

enum USERVERTICAL {
  DEV
  DESIGN
  MARKETING
  COMMUNITY
  FINANCE
  LEGAL
  HR
  OPERATIONS
}

enum HOUSEID {
  MANAGEMENT
  GROWTH
  PRODUCT_TECH
  EXECUTIVE
}

enum USERINDUSTRY {
  CRYPTO
  FINANCE
  HEALTHCARE
  EDUCATION
  RETAIL
  REALSTATE
  GAMING
  SOCIAL
  OTHERS
}

enum CANDIDATERESULT {
  APPROVED
  REJECTED
  PENDING
}

//-------------------------------------QuickDocs-----------------------------------------

model DocMarkdown {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  docId     String   @unique
  logType   String
  userId    String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      String?
  markdown  Json
}

//-------------------------------------Notifications-----------------------------------------

model Notification {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  userId            String            @db.ObjectId
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  title             String
  description       String
  matchId           String?           @unique
  matchType         String?
  notificationType  NotificationType
  notificationData  Json?
  isRead            Boolean?          @default(false)
}

enum NotificationType {
  ADMIN
  SELF_GENERATED
  USER_TO_USER
}

//-------------------------------------Missions-------------------------------------------

type STATUS {
  label String
  value String
  color String
}

type PRIORITY {
  label String
  value String
  color String
}


model Mission {
  id  String   @id @default(auto()) @map("_id") @db.ObjectId
  house  HOUSEID
  vertical USERVERTICAL?
  month        String
  completed    Boolean?
  status STATUS?
  priority PRIORITY?
  housePoints  Int
  indiePoints  Int  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  completedAt DateTime?
  expirable    Boolean?
  expiresAt DateTime?
  title       String
  description String?
}

model MissionTask {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  missionId    String   
  userId       String?  
  assignees    String[]  @db.ObjectId
  title        String?
  description  String?
  status       STATUS? 
  priority     PRIORITY?
  indiePoints  Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  completedAt  DateTime?
  completed    Boolean? @default(false)
  expirable    Boolean? @default(false)
  expiresAt    DateTime?
  avatar       String?
  name         String?
  email        String?
  userInfoId   String?
}

//-------------------------------------Badges-------------------------------------------

model BadgeTemplate {
  id  String   @id @default(auto()) @map("_id") @db.ObjectId
  name String 
  description String
  badgeType BadgeType
  imageurl String
  criteria Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BadgeType {
  CUSTOM
  STREAK
  TIME_BASED
}

enum StreakType {
  WORKLOG_BASED
  TASK_BASED
  MISSION_BASED
  ARTICLE_BASED
}

//-------------------------------------Badges-Rewarded-------------------------------------------

model BadgeRewarded {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String  
  badgeTemplateId String       @db.ObjectId
  name           String   
  sequence       String   
  date           String?
  status         BadgeStatus @default(INACTIVE) 
  imageUrl       String?  
  showsCounter   Boolean  @default(false) 
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum BadgeStatus {
  INACTIVE
  ACTIVATED
  REWARDED
  SUSPENDED
}

//-------------------------------------POINTERS - Chats And Replies-------------------------------------------

model Pointer {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId 
  targetUserId String   @db.ObjectId 
  content      String   
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  replies      Reply[]  @relation("PointerReplies")
}

model Reply {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  pointerId  String   @db.ObjectId
  pointer    Pointer  @relation(fields: [pointerId], references: [id], name: "PointerReplies")
  userId     String   @db.ObjectId
  content    String   
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// -------------------------------------Events-------------------------------------------
model Event {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  subTitle  String
  link      String   @unique
  date      String
  month     Int      
  year      Int      
  time      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  taskId    String   @id @map("_id")
  name      String
  status    String
  priority  String?   
  assignees String[]  
  url       String
  startDate DateTime? 
  dueDate   DateTime? 
}

//-------------------------------------Worklog-Buff-Badge-----------------------------------------

model BuffBadge {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  userId         String      @db.ObjectId
  title          String
  points         Int
  buffLevel      BUFF_LEVEL 
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  month          String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, month]) 
}

enum BUFF_LEVEL {
  TRUTH_SEEKER
  BABY_GROOT
  WORK_HULK
  VAMPIRE_LORD
  ALIEN_PREDATOR
  DEVIL
}

//-------------------------------------PUSH NOTIFICATIONS-------------------------------------------

type KEYS {
  p256dh String
  auth   String
}
type PUSHNOTIFICATION {
  endpoint String
  expirationTime String?
  keys     KEYS
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId  @unique
  subscriptions PUSHNOTIFICATION[]
}

// -------------------------------------Client Shortcuts and utils--------------------------------- 

model ClientUtilityLink {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId  String   
  title     String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
