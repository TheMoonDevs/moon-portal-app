// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  username       String
  password       String
  email          String?
  name           String?
  avatar         String?
  banner         String?
  description     String?
  userType       USERTYPE?     @default(MEMBER)
  role           USERROLE?     @default(CORETEAM)
  vertical       USERVERTICAL? @default(DEV)
  house          HOUSEID?      @default(PRODUCT_TECH)
  status         USERSTATUS?   @default(ACTIVE)
  industry       USERINDUSTRY?
  isAdmin        Boolean       @default(false)
  timezone       String?
  country        String?
  createdLinks   Link[]        @relation("CreatedLinks")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  workData       Json?
  personalData   Json?
  payData        Json?
  thirdPartyData Json?
  slackId        String?
}

model Candidate {
  id                     String  @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String
  mobileNumber           Int
  portfolio              String?
  resume                 String?
  applicantAnswers       Json[]
  educationQualification String?
  skillQualification     String?
  workExp                String?
  jobPost                JobPost @relation(fields: [jobPostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobPostId              String  @db.ObjectId
  screeningRound1        Json?
  screeningRound2        Json?
  // result              CandidateResult   @default(PENDING)
}

model JobPost {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  deptName    String
  description String
  defaultReq  Json?
  deptReq     Json?
  adminReq    Json?
  hrReq       Json?
  status      JOBSTATUS   @default(ACTIVE)
  jobpost     JOBPOST     @default(FULLTIME)
  createdAt   DateTime    @default(now())
  Candidate   Candidate[]
}

model Survey {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  username String
  password String
  name     String?
}

model ShortLink {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  slug       String   @unique
  redirectTo String
  params     Json?
  createdAt  DateTime @default(now())
}

model ClientLeadForm {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  teamSize        String?
  industry        String?
  requirementType String?
  budget          Int?
  time            String?
  stage           String?
  contact         Json
  createdAt       DateTime @default(now())
}

// ---------------------------------------QUICKLINKS---------------------------
model ParentDirectory {
  id    String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  logo  String
  slug  String
  type  ROOTTYPE?
  links Link[]
}

model UserLink {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  linkType    USERLINKTYPE //  Favorited Links or top used or custom_link_list
  linkData    Link         @relation(fields: [linkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  linkId      String       @db.ObjectId
  userId      String
  directoryId String?
  topUsed     Int          @default(0)
  isFavorite  Boolean?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
}

model Link {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  logo            String
  image           String
  linkType        String
  url             String
  clickCount      Int
  isFavorite      Boolean          @default(false)
  rootParentDir   ParentDirectory? @relation(fields: [rootParentDirId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rootParentDirId String?          @db.ObjectId
  author          User?            @relation(name: "CreatedLinks", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userLink        UserLink[]
  authorId        String?          @db.ObjectId
  directoryId     String?          @db.ObjectId
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())

  @@index([rootParentDirId])
  @@index([authorId])
  @@map("Links")
}

model Directory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  logo        String
  slug        String
  parentDirId String?
  timestamp   DateTime @default(now())
}

model RecentDirectory {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  directoryIds String[] @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum ROOTTYPE {
  DEPARTMENT
  COMMON_RESOURCES
}

enum USERLINKTYPE {
  FAVORITED
  TOPUSED
  CUSTOM
}

//------------------------------------------------------------------------------

model ZeroRecords {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String? @db.ObjectId
  config      String?
  year        String?
  allZeros    Json[]
  allMeetings Json[]
}

model WorkLogs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  logType   String?
  userId    String?  @db.ObjectId
  title     String?
  date      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  works     Json[]
}

model Certificate {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  userId    String?  @db.ObjectId
  fileId    String?  @db.ObjectId
  file      Json?
  files     Json[]
  userInfo  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model FileUpload {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String?  @db.ObjectId
  uploadedByUserId String?  @db.ObjectId
  fileName         String?
  mimeType         String?
  fileUrl          String?
  folderName       String?
  fileSize         Int?
  userInfo         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
}

model ConfigData {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  configId   String   @unique
  configType String   @default("")
  configApp  String?  @default("portal")
  configData Json?
  timestamp  DateTime @updatedAt
}

model Article {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  image           String?  
  content         String
  articleUrl      String
  articleType     String
  author          String
  publishDate     DateTime
  categories      String[]

  @@index([title], name: "title_idx")
  @@index([author], name: "author_idx")
}

enum JOBPOST {
  FULLTIME
  PARTTIME
  INTERN
}

enum JOBSTATUS {
  ACTIVE
  INACTIVE
}

enum USERTYPE {
  MEMBER
  CLIENT
}

enum USERSTATUS {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum USERROLE {
  CORETEAM
  ASSOCIATE
  FREELANCER
  INTERN
  TRIAL_CANDIDATE
}

enum USERVERTICAL {
  DEV
  DESIGN
  MARKETING
  COMMUNITY
  FINANCE
  LEGAL
  HR
  OPERATIONS
}

enum HOUSEID {
  MANGEMENT
  GROWTH
  PRODUCT_TECH
  EXECUTIVE
}

enum USERINDUSTRY {
  CRYPTO
  FINANCE
  HEALTHCARE
  EDUCATION
  RETAIL
  REALSTATE
  GAMING
  SOCIAL
  OTHERS
}

enum CANDIDATERESULT {
  APPROVED
  REJECTED
  PENDING
}

//-------------------------------------QuickDocs-----------------------------------------

model DocMarkdown {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  docId     String   @unique
  logType   String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  markdown  Json
}

//-------------------------------------Notifications-----------------------------------------

model Notification {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  userId            String            @db.ObjectId
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  title             String
  description       String
  matchId           String?           
  matchType         String?
  notificationType  NotificationType
  notificationData  Json?
}

enum NotificationType {
  ADMIN
  SELF_GENERATED
  USER_TO_USER
}

//-------------------------------------Missions-------------------------------------------

model Mission {
  id  String   @id @default(auto()) @map("_id") @db.ObjectId
  house  HOUSEID
  vertical USERVERTICAL?
  month        String
  completed    Boolean?
  housePoints  Int
  indiePoints  Int  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  completedAt DateTime?
  expirable    Boolean?
  expiresAt DateTime?
  title       String
  description String?
  tasks Json?
}